# coding: utf-8

"""
    Metal API

    desc  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import unittest
import datetime

import equinix_metal
from equinix_metal.models.vrf import Vrf  # noqa: E501
from equinix_metal.rest import ApiException

class TestVrf(unittest.TestCase):
    """Vrf unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test Vrf
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Vrf`
        """
        model = equinix_metal.models.vrf.Vrf()  # noqa: E501
        if include_optional :
            return Vrf(
                bgp_dynamic_neighbors_bfd_enabled = True, 
                bgp_dynamic_neighbors_enabled = True, 
                bgp_dynamic_neighbors_export_route_map = True, 
                bill = True, 
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                created_by = equinix_metal.models.user.User(
                    avatar_thumb_url = '', 
                    avatar_url = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    customdata = equinix_metal.models.customdata.customdata(), 
                    email = '', 
                    emails = [
                        equinix_metal.models.href.Href(
                            href = '', )
                        ], 
                    first_name = '', 
                    fraud_score = '', 
                    full_name = '', 
                    href = '', 
                    id = '', 
                    last_login_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    last_name = '', 
                    max_organizations = 56, 
                    max_projects = 56, 
                    phone_number = '', 
                    short_id = '', 
                    timezone = '', 
                    two_factor_auth = '', 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                description = '', 
                href = '', 
                id = '', 
                ip_ranges = [
                    ''
                    ], 
                local_asn = 56, 
                metro = equinix_metal.models.metro.Metro(
                    code = '', 
                    country = '', 
                    href = '', 
                    id = '', 
                    name = '', ), 
                name = '', 
                project = equinix_metal.models.project.Project(
                    backend_transfer_enabled = True, 
                    bgp_config = equinix_metal.models.href.Href(
                        href = '', ), 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    customdata = equinix_metal.models.customdata.customdata(), 
                    devices = [
                        equinix_metal.models.href.Href(
                            href = '', )
                        ], 
                    href = '', 
                    id = '', 
                    invitations = [
                        
                        ], 
                    max_devices = equinix_metal.models.max_devices.max_devices(), 
                    members = [
                        
                        ], 
                    memberships = [
                        
                        ], 
                    name = '', 
                    network_status = equinix_metal.models.network_status.network_status(), 
                    organization = , 
                    payment_method = , 
                    ssh_keys = [
                        
                        ], 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    volumes = [
                        
                        ], ), 
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                virtual_circuits = [
                    equinix_metal.models.vrf_virtual_circuits_inner.Vrf_virtual_circuits_inner(
                        customer_ip = '12.0.0.2', 
                        href = '', 
                        id = '', 
                        md5 = '', 
                        metal_ip = '12.0.0.1', 
                        name = '', 
                        peer_asn = 56, 
                        port = equinix_metal.models.href.Href(
                            href = '', ), 
                        status = '', 
                        subnet = '12.0.0.0/30', )
                    ]
            )
        else :
            return Vrf(
        )
        """

    def testVrf(self):
        """Test Vrf"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
