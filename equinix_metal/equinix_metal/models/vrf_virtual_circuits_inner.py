# coding: utf-8

"""
    Metal API

    desc  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from equinix_metal.models.href import Href

class VrfVirtualCircuitsInner(BaseModel):
    """
    VrfVirtualCircuitsInner
    """
    customer_ip: Optional[StrictStr] = Field(None, description="An IP address from the subnet that will be used on the Customer side. This parameter is optional, but if supplied, we will use the other usable IP address in the subnet as the Metal IP. By default, the last usable IP address in the subnet will be used.")
    href: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    md5: Optional[StrictStr] = Field(None, description="The MD5 password for the BGP peering in plaintext (not a checksum).")
    metal_ip: Optional[StrictStr] = Field(None, description="An IP address from the subnet that will be used on the Metal side. This parameter is optional, but if supplied, we will use the other usable IP address in the subnet as the Customer IP. By default, the first usable IP address in the subnet will be used.")
    name: Optional[StrictStr] = None
    peer_asn: Optional[StrictInt] = Field(None, description="The peer ASN that will be used with the VRF on the Virtual Circuit.")
    port: Optional[Href] = None
    status: Optional[StrictStr] = None
    subnet: Optional[StrictStr] = Field(None, description="The /30 or /31 subnet of one of the VRF IP Blocks that will be used with the VRF for the Virtual Circuit. This subnet does not have to be an existing VRF IP reservation, as we will create the VRF IP reservation on creation if it does not exist. The Metal IP and Customer IP must be IPs from this subnet. For /30 subnets, the network and broadcast IPs cannot be used as the Metal or Customer IP.")
    __properties = ["customer_ip", "href", "id", "md5", "metal_ip", "name", "peer_asn", "port", "status", "subnet"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VrfVirtualCircuitsInner:
        """Create an instance of VrfVirtualCircuitsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of port
        if self.port:
            _dict['port'] = self.port.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VrfVirtualCircuitsInner:
        """Create an instance of VrfVirtualCircuitsInner from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return VrfVirtualCircuitsInner.parse_obj(obj)

        _obj = VrfVirtualCircuitsInner.parse_obj({
            "customer_ip": obj.get("customer_ip"),
            "href": obj.get("href"),
            "id": obj.get("id"),
            "md5": obj.get("md5"),
            "metal_ip": obj.get("metal_ip"),
            "name": obj.get("name"),
            "peer_asn": obj.get("peer_asn"),
            "port": Href.from_dict(obj.get("port")) if obj.get("port") is not None else None,
            "status": obj.get("status"),
            "subnet": obj.get("subnet")
        })
        return _obj

