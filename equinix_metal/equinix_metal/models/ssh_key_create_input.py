# coding: utf-8

"""
    Metal API

    desc  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class SSHKeyCreateInput(BaseModel):
    """
    SSHKeyCreateInput
    """
    href: Optional[StrictStr] = None
    instances_ids: Optional[conlist(StrictStr)] = Field(None, description="List of instance UUIDs to associate SSH key with, when empty array is sent all instances belonging       to entity will be included")
    key: Optional[StrictStr] = None
    label: Optional[StrictStr] = None
    __properties = ["href", "instances_ids", "key", "label"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SSHKeyCreateInput:
        """Create an instance of SSHKeyCreateInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SSHKeyCreateInput:
        """Create an instance of SSHKeyCreateInput from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return SSHKeyCreateInput.parse_obj(obj)

        _obj = SSHKeyCreateInput.parse_obj({
            "href": obj.get("href"),
            "instances_ids": obj.get("instances_ids"),
            "key": obj.get("key"),
            "label": obj.get("label")
        })
        return _obj

