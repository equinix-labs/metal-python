# coding: utf-8

"""
    Metal API

    desc  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from equinix_metal.models.metro import Metro
from equinix_metal.models.project import Project
from equinix_metal.models.user import User
from equinix_metal.models.vrf_virtual_circuits_inner import VrfVirtualCircuitsInner

class Vrf(BaseModel):
    """
    Vrf
    """
    bgp_dynamic_neighbors_bfd_enabled: Optional[StrictBool] = Field(None, description="Toggle BFD on dynamic bgp neighbors sessions")
    bgp_dynamic_neighbors_enabled: Optional[StrictBool] = Field(None, description="Toggle to enable the dynamic bgp neighbors feature on the VRF")
    bgp_dynamic_neighbors_export_route_map: Optional[StrictBool] = Field(None, description="Toggle to export the VRF route-map to the dynamic bgp neighbors")
    bill: Optional[StrictBool] = Field(False, description="True if the VRF is being billed. Usage will start when the first VRF Virtual Circuit is active, and will only stop when the VRF has been deleted.")
    created_at: Optional[datetime] = None
    created_by: Optional[User] = None
    description: Optional[StrictStr] = Field(None, description="Optional field that can be set to describe the VRF")
    href: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    ip_ranges: Optional[conlist(StrictStr)] = Field(None, description="A list of CIDR network addresses. Like [\"10.0.0.0/16\", \"2001:d78::/56\"].")
    local_asn: Optional[StrictInt] = Field(None, description="A 4-byte ASN associated with the VRF.")
    metro: Optional[Metro] = None
    name: Optional[StrictStr] = None
    project: Optional[Project] = None
    updated_at: Optional[datetime] = None
    virtual_circuits: Optional[conlist(VrfVirtualCircuitsInner)] = Field(None, description="Virtual circuits that are in the VRF")
    __properties = ["bgp_dynamic_neighbors_bfd_enabled", "bgp_dynamic_neighbors_enabled", "bgp_dynamic_neighbors_export_route_map", "bill", "created_at", "created_by", "description", "href", "id", "ip_ranges", "local_asn", "metro", "name", "project", "updated_at", "virtual_circuits"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Vrf:
        """Create an instance of Vrf from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metro
        if self.metro:
            _dict['metro'] = self.metro.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project
        if self.project:
            _dict['project'] = self.project.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in virtual_circuits (list)
        _items = []
        if self.virtual_circuits:
            for _item in self.virtual_circuits:
                if _item:
                    _items.append(_item.to_dict())
            _dict['virtual_circuits'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Vrf:
        """Create an instance of Vrf from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Vrf.parse_obj(obj)

        _obj = Vrf.parse_obj({
            "bgp_dynamic_neighbors_bfd_enabled": obj.get("bgp_dynamic_neighbors_bfd_enabled"),
            "bgp_dynamic_neighbors_enabled": obj.get("bgp_dynamic_neighbors_enabled"),
            "bgp_dynamic_neighbors_export_route_map": obj.get("bgp_dynamic_neighbors_export_route_map"),
            "bill": obj.get("bill") if obj.get("bill") is not None else False,
            "created_at": obj.get("created_at"),
            "created_by": User.from_dict(obj.get("created_by")) if obj.get("created_by") is not None else None,
            "description": obj.get("description"),
            "href": obj.get("href"),
            "id": obj.get("id"),
            "ip_ranges": obj.get("ip_ranges"),
            "local_asn": obj.get("local_asn"),
            "metro": Metro.from_dict(obj.get("metro")) if obj.get("metro") is not None else None,
            "name": obj.get("name"),
            "project": Project.from_dict(obj.get("project")) if obj.get("project") is not None else None,
            "updated_at": obj.get("updated_at"),
            "virtual_circuits": [VrfVirtualCircuitsInner.from_dict(_item) for _item in obj.get("virtual_circuits")] if obj.get("virtual_circuits") is not None else None
        })
        return _obj

