# coding: utf-8

"""
    Metal API

    desc  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictBytes, StrictStr
from equinix_metal.models.address import Address

class OrganizationInput(BaseModel):
    """
    OrganizationInput
    """
    address: Optional[Address] = None
    billing_address: Optional[Address] = None
    customdata: Optional[Dict[str, Any]] = None
    description: Optional[StrictStr] = None
    enforce_2fa_at: Optional[datetime] = Field(None, description="Force to all members to have enabled the two factor authentication after that date, unless the value is null")
    href: Optional[StrictStr] = None
    logo: Optional[StrictBytes] = None
    name: Optional[StrictStr] = None
    twitter: Optional[StrictStr] = None
    website: Optional[StrictStr] = None
    __properties = ["address", "billing_address", "customdata", "description", "enforce_2fa_at", "href", "logo", "name", "twitter", "website"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrganizationInput:
        """Create an instance of OrganizationInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing_address
        if self.billing_address:
            _dict['billing_address'] = self.billing_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of logo
        if self.logo:
            _dict['logo'] = self.logo.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrganizationInput:
        """Create an instance of OrganizationInput from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return OrganizationInput.parse_obj(obj)

        _obj = OrganizationInput.parse_obj({
            "address": Address.from_dict(obj.get("address")) if obj.get("address") is not None else None,
            "billing_address": Address.from_dict(obj.get("billing_address")) if obj.get("billing_address") is not None else None,
            "customdata": obj.get("customdata"),
            "description": obj.get("description"),
            "enforce_2fa_at": obj.get("enforce_2fa_at"),
            "href": obj.get("href"),
            "logo": bytearray.from_dict(obj.get("logo")) if obj.get("logo") is not None else None,
            "name": obj.get("name"),
            "twitter": obj.get("twitter"),
            "website": obj.get("website")
        })
        return _obj

